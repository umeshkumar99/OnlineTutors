//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineTutorsEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TutorsOnlineEntities : DbContext
    {
        public TutorsOnlineEntities()
            : base("name=TutorsOnlineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int USP_AddUser(string userName, string email, string contactNo, string loginid, string password, Nullable<int> branch_Id, Nullable<decimal> groupid, Nullable<int> compid, string createdBy, ObjectParameter count)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var loginidParameter = loginid != null ?
                new ObjectParameter("Loginid", loginid) :
                new ObjectParameter("Loginid", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var branch_IdParameter = branch_Id.HasValue ?
                new ObjectParameter("Branch_Id", branch_Id) :
                new ObjectParameter("Branch_Id", typeof(int));
    
            var groupidParameter = groupid.HasValue ?
                new ObjectParameter("Groupid", groupid) :
                new ObjectParameter("Groupid", typeof(decimal));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("Compid", compid) :
                new ObjectParameter("Compid", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AddUser", userNameParameter, emailParameter, contactNoParameter, loginidParameter, passwordParameter, branch_IdParameter, groupidParameter, compidParameter, createdByParameter, count);
        }
    
        public virtual ObjectResult<USP_GetUserDetails_Result> USP_GetUserDetails(string loginId, string password)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUserDetails_Result>("USP_GetUserDetails", loginIdParameter, passwordParameter);
        }
    
        public virtual int USP_UpdateUser(Nullable<decimal> pk_UserId, string p_UserName, Nullable<int> company_Id, string p_Email, string p_ContactNo, string p_Password, Nullable<int> branch_Id, Nullable<decimal> p_GroupId, Nullable<bool> p_Status)
        {
            var pk_UserIdParameter = pk_UserId.HasValue ?
                new ObjectParameter("pk_UserId", pk_UserId) :
                new ObjectParameter("pk_UserId", typeof(decimal));
    
            var p_UserNameParameter = p_UserName != null ?
                new ObjectParameter("p_UserName", p_UserName) :
                new ObjectParameter("p_UserName", typeof(string));
    
            var company_IdParameter = company_Id.HasValue ?
                new ObjectParameter("Company_Id", company_Id) :
                new ObjectParameter("Company_Id", typeof(int));
    
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_ContactNoParameter = p_ContactNo != null ?
                new ObjectParameter("p_ContactNo", p_ContactNo) :
                new ObjectParameter("p_ContactNo", typeof(string));
    
            var p_PasswordParameter = p_Password != null ?
                new ObjectParameter("p_Password", p_Password) :
                new ObjectParameter("p_Password", typeof(string));
    
            var branch_IdParameter = branch_Id.HasValue ?
                new ObjectParameter("Branch_Id", branch_Id) :
                new ObjectParameter("Branch_Id", typeof(int));
    
            var p_GroupIdParameter = p_GroupId.HasValue ?
                new ObjectParameter("p_GroupId", p_GroupId) :
                new ObjectParameter("p_GroupId", typeof(decimal));
    
            var p_StatusParameter = p_Status.HasValue ?
                new ObjectParameter("p_Status", p_Status) :
                new ObjectParameter("p_Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateUser", pk_UserIdParameter, p_UserNameParameter, company_IdParameter, p_EmailParameter, p_ContactNoParameter, p_PasswordParameter, branch_IdParameter, p_GroupIdParameter, p_StatusParameter);
        }
    
        public virtual ObjectResult<usp_CategoryGet_Result> usp_CategoryGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CategoryGet_Result>("usp_CategoryGet");
        }
    
        public virtual ObjectResult<usp_CategoryGetbyID_Result> usp_CategoryGetbyID(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CategoryGetbyID_Result>("usp_CategoryGetbyID", categoryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CategoryInsert(string categoryName, Nullable<int> createdBy)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CategoryInsert", categoryNameParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CategoryUpdate(Nullable<int> categoryID, string categoryName, Nullable<int> updatedBy, Nullable<bool> status)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CategoryUpdate", categoryIDParameter, categoryNameParameter, updatedByParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_PageGet_Result> usp_PageGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PageGet_Result>("usp_PageGet");
        }
    
        public virtual ObjectResult<usp_PageGetbyID_Result> usp_PageGetbyID(Nullable<int> pageMasterID)
        {
            var pageMasterIDParameter = pageMasterID.HasValue ?
                new ObjectParameter("PageMasterID", pageMasterID) :
                new ObjectParameter("PageMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PageGetbyID_Result>("usp_PageGetbyID", pageMasterIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PageInsert(string pageName, Nullable<int> createdBy)
        {
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PageInsert", pageNameParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PageUpdate(Nullable<int> pageID, string pageName, Nullable<int> updatedBy, Nullable<bool> status)
        {
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PageUpdate", pageIDParameter, pageNameParameter, updatedByParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PageImmagesInsert(string imageURL, Nullable<int> displayOrder, Nullable<int> pageID, Nullable<int> createdBy)
        {
            var imageURLParameter = imageURL != null ?
                new ObjectParameter("ImageURL", imageURL) :
                new ObjectParameter("ImageURL", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PageImmagesInsert", imageURLParameter, displayOrderParameter, pageIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<usp_CategoryGetList_Result> usp_CategoryGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CategoryGetList_Result>("usp_CategoryGetList");
        }
    
        public virtual ObjectResult<usp_ServiceGet_Result> usp_ServiceGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceGet_Result>("usp_ServiceGet");
        }
    
        public virtual ObjectResult<usp_ServiceGetbyID_Result> usp_ServiceGetbyID(Nullable<int> serviceID)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceGetbyID_Result>("usp_ServiceGetbyID", serviceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_ServiceInsert(string description, Nullable<int> createdBy, Nullable<int> categoryid)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_ServiceInsert", descriptionParameter, createdByParameter, categoryidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_ServiceUpdate(Nullable<int> serviceID, string description, Nullable<int> updatedBy, Nullable<bool> status, Nullable<int> categoryid)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_ServiceUpdate", serviceIDParameter, descriptionParameter, updatedByParameter, statusParameter, categoryidParameter);
        }
    }
}
